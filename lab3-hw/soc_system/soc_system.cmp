	component soc_system is
		port (
			apple_sprite_s1_address                      : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			apple_sprite_s1_debugaccess                  : in    std_logic                     := 'X';             -- debugaccess
			apple_sprite_s1_clken                        : in    std_logic                     := 'X';             -- clken
			apple_sprite_s1_chipselect                   : in    std_logic                     := 'X';             -- chipselect
			apple_sprite_s1_write                        : in    std_logic                     := 'X';             -- write
			apple_sprite_s1_readdata                     : out   std_logic_vector(15 downto 0);                    -- readdata
			apple_sprite_s1_writedata                    : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			apple_sprite_s1_byteenable                   : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			clk_clk                                      : in    std_logic                     := 'X';             -- clk
			hps_hps_io_emac1_inst_TX_CLK                 : out   std_logic;                                        -- hps_io_emac1_inst_TX_CLK
			hps_hps_io_emac1_inst_TXD0                   : out   std_logic;                                        -- hps_io_emac1_inst_TXD0
			hps_hps_io_emac1_inst_TXD1                   : out   std_logic;                                        -- hps_io_emac1_inst_TXD1
			hps_hps_io_emac1_inst_TXD2                   : out   std_logic;                                        -- hps_io_emac1_inst_TXD2
			hps_hps_io_emac1_inst_TXD3                   : out   std_logic;                                        -- hps_io_emac1_inst_TXD3
			hps_hps_io_emac1_inst_RXD0                   : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RXD0
			hps_hps_io_emac1_inst_MDIO                   : inout std_logic                     := 'X';             -- hps_io_emac1_inst_MDIO
			hps_hps_io_emac1_inst_MDC                    : out   std_logic;                                        -- hps_io_emac1_inst_MDC
			hps_hps_io_emac1_inst_RX_CTL                 : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RX_CTL
			hps_hps_io_emac1_inst_TX_CTL                 : out   std_logic;                                        -- hps_io_emac1_inst_TX_CTL
			hps_hps_io_emac1_inst_RX_CLK                 : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RX_CLK
			hps_hps_io_emac1_inst_RXD1                   : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RXD1
			hps_hps_io_emac1_inst_RXD2                   : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RXD2
			hps_hps_io_emac1_inst_RXD3                   : in    std_logic                     := 'X';             -- hps_io_emac1_inst_RXD3
			hps_hps_io_sdio_inst_CMD                     : inout std_logic                     := 'X';             -- hps_io_sdio_inst_CMD
			hps_hps_io_sdio_inst_D0                      : inout std_logic                     := 'X';             -- hps_io_sdio_inst_D0
			hps_hps_io_sdio_inst_D1                      : inout std_logic                     := 'X';             -- hps_io_sdio_inst_D1
			hps_hps_io_sdio_inst_CLK                     : out   std_logic;                                        -- hps_io_sdio_inst_CLK
			hps_hps_io_sdio_inst_D2                      : inout std_logic                     := 'X';             -- hps_io_sdio_inst_D2
			hps_hps_io_sdio_inst_D3                      : inout std_logic                     := 'X';             -- hps_io_sdio_inst_D3
			hps_hps_io_usb1_inst_D0                      : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D0
			hps_hps_io_usb1_inst_D1                      : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D1
			hps_hps_io_usb1_inst_D2                      : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D2
			hps_hps_io_usb1_inst_D3                      : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D3
			hps_hps_io_usb1_inst_D4                      : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D4
			hps_hps_io_usb1_inst_D5                      : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D5
			hps_hps_io_usb1_inst_D6                      : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D6
			hps_hps_io_usb1_inst_D7                      : inout std_logic                     := 'X';             -- hps_io_usb1_inst_D7
			hps_hps_io_usb1_inst_CLK                     : in    std_logic                     := 'X';             -- hps_io_usb1_inst_CLK
			hps_hps_io_usb1_inst_STP                     : out   std_logic;                                        -- hps_io_usb1_inst_STP
			hps_hps_io_usb1_inst_DIR                     : in    std_logic                     := 'X';             -- hps_io_usb1_inst_DIR
			hps_hps_io_usb1_inst_NXT                     : in    std_logic                     := 'X';             -- hps_io_usb1_inst_NXT
			hps_hps_io_spim1_inst_CLK                    : out   std_logic;                                        -- hps_io_spim1_inst_CLK
			hps_hps_io_spim1_inst_MOSI                   : out   std_logic;                                        -- hps_io_spim1_inst_MOSI
			hps_hps_io_spim1_inst_MISO                   : in    std_logic                     := 'X';             -- hps_io_spim1_inst_MISO
			hps_hps_io_spim1_inst_SS0                    : out   std_logic;                                        -- hps_io_spim1_inst_SS0
			hps_hps_io_uart0_inst_RX                     : in    std_logic                     := 'X';             -- hps_io_uart0_inst_RX
			hps_hps_io_uart0_inst_TX                     : out   std_logic;                                        -- hps_io_uart0_inst_TX
			hps_hps_io_i2c0_inst_SDA                     : inout std_logic                     := 'X';             -- hps_io_i2c0_inst_SDA
			hps_hps_io_i2c0_inst_SCL                     : inout std_logic                     := 'X';             -- hps_io_i2c0_inst_SCL
			hps_hps_io_i2c1_inst_SDA                     : inout std_logic                     := 'X';             -- hps_io_i2c1_inst_SDA
			hps_hps_io_i2c1_inst_SCL                     : inout std_logic                     := 'X';             -- hps_io_i2c1_inst_SCL
			hps_hps_io_gpio_inst_GPIO09                  : inout std_logic                     := 'X';             -- hps_io_gpio_inst_GPIO09
			hps_hps_io_gpio_inst_GPIO35                  : inout std_logic                     := 'X';             -- hps_io_gpio_inst_GPIO35
			hps_hps_io_gpio_inst_GPIO40                  : inout std_logic                     := 'X';             -- hps_io_gpio_inst_GPIO40
			hps_hps_io_gpio_inst_GPIO48                  : inout std_logic                     := 'X';             -- hps_io_gpio_inst_GPIO48
			hps_hps_io_gpio_inst_GPIO53                  : inout std_logic                     := 'X';             -- hps_io_gpio_inst_GPIO53
			hps_hps_io_gpio_inst_GPIO54                  : inout std_logic                     := 'X';             -- hps_io_gpio_inst_GPIO54
			hps_hps_io_gpio_inst_GPIO61                  : inout std_logic                     := 'X';             -- hps_io_gpio_inst_GPIO61
			hps_ddr3_mem_a                               : out   std_logic_vector(14 downto 0);                    -- mem_a
			hps_ddr3_mem_ba                              : out   std_logic_vector(2 downto 0);                     -- mem_ba
			hps_ddr3_mem_ck                              : out   std_logic;                                        -- mem_ck
			hps_ddr3_mem_ck_n                            : out   std_logic;                                        -- mem_ck_n
			hps_ddr3_mem_cke                             : out   std_logic;                                        -- mem_cke
			hps_ddr3_mem_cs_n                            : out   std_logic;                                        -- mem_cs_n
			hps_ddr3_mem_ras_n                           : out   std_logic;                                        -- mem_ras_n
			hps_ddr3_mem_cas_n                           : out   std_logic;                                        -- mem_cas_n
			hps_ddr3_mem_we_n                            : out   std_logic;                                        -- mem_we_n
			hps_ddr3_mem_reset_n                         : out   std_logic;                                        -- mem_reset_n
			hps_ddr3_mem_dq                              : inout std_logic_vector(31 downto 0) := (others => 'X'); -- mem_dq
			hps_ddr3_mem_dqs                             : inout std_logic_vector(3 downto 0)  := (others => 'X'); -- mem_dqs
			hps_ddr3_mem_dqs_n                           : inout std_logic_vector(3 downto 0)  := (others => 'X'); -- mem_dqs_n
			hps_ddr3_mem_odt                             : out   std_logic;                                        -- mem_odt
			hps_ddr3_mem_dm                              : out   std_logic_vector(3 downto 0);                     -- mem_dm
			hps_ddr3_oct_rzqin                           : in    std_logic                     := 'X';             -- oct_rzqin
			map1_0_avalon_slave_0_address                : in    std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			map1_0_avalon_slave_0_chipselect             : in    std_logic                     := 'X';             -- chipselect
			map1_0_avalon_slave_0_write                  : in    std_logic                     := 'X';             -- write
			map1_0_avalon_slave_0_writedata              : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- writedata
			map1_0_vga_b                                 : out   std_logic_vector(7 downto 0);                     -- b
			map1_0_vga_blank_n                           : out   std_logic;                                        -- blank_n
			map1_0_vga_clk                               : out   std_logic;                                        -- clk
			map1_0_vga_g                                 : out   std_logic_vector(7 downto 0);                     -- g
			map1_0_vga_hs                                : out   std_logic;                                        -- hs
			map1_0_vga_r                                 : out   std_logic_vector(7 downto 0);                     -- r
			map1_0_vga_sync_n                            : out   std_logic;                                        -- sync_n
			map1_0_vga_vs                                : out   std_logic;                                        -- vs
			map1_1_avalon_slave_0_address                : in    std_logic_vector(2 downto 0)  := (others => 'X'); -- address
			map1_1_avalon_slave_0_chipselect             : in    std_logic                     := 'X';             -- chipselect
			map1_1_avalon_slave_0_write                  : in    std_logic                     := 'X';             -- write
			map1_1_avalon_slave_0_writedata              : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- writedata
			map1_1_vga_b                                 : out   std_logic_vector(7 downto 0);                     -- b
			map1_1_vga_blank_n                           : out   std_logic;                                        -- blank_n
			map1_1_vga_clk                               : out   std_logic;                                        -- clk
			map1_1_vga_g                                 : out   std_logic_vector(7 downto 0);                     -- g
			map1_1_vga_hs                                : out   std_logic;                                        -- hs
			map1_1_vga_r                                 : out   std_logic_vector(7 downto 0);                     -- r
			map1_1_vga_sync_n                            : out   std_logic;                                        -- sync_n
			map1_1_vga_vs                                : out   std_logic;                                        -- vs
			reset_reset_n                                : in    std_logic                     := 'X';             -- reset_n
			snake_body_bottomleft_sprite_s1_address      : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_body_bottomleft_sprite_s1_debugaccess  : in    std_logic                     := 'X';             -- debugaccess
			snake_body_bottomleft_sprite_s1_clken        : in    std_logic                     := 'X';             -- clken
			snake_body_bottomleft_sprite_s1_chipselect   : in    std_logic                     := 'X';             -- chipselect
			snake_body_bottomleft_sprite_s1_write        : in    std_logic                     := 'X';             -- write
			snake_body_bottomleft_sprite_s1_readdata     : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_body_bottomleft_sprite_s1_writedata    : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_body_bottomleft_sprite_s1_byteenable   : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_body_bottomright_sprite_s1_address     : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_body_bottomright_sprite_s1_debugaccess : in    std_logic                     := 'X';             -- debugaccess
			snake_body_bottomright_sprite_s1_clken       : in    std_logic                     := 'X';             -- clken
			snake_body_bottomright_sprite_s1_chipselect  : in    std_logic                     := 'X';             -- chipselect
			snake_body_bottomright_sprite_s1_write       : in    std_logic                     := 'X';             -- write
			snake_body_bottomright_sprite_s1_readdata    : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_body_bottomright_sprite_s1_writedata   : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_body_bottomright_sprite_s1_byteenable  : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_body_horizontal_sprite_s1_address      : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_body_horizontal_sprite_s1_debugaccess  : in    std_logic                     := 'X';             -- debugaccess
			snake_body_horizontal_sprite_s1_clken        : in    std_logic                     := 'X';             -- clken
			snake_body_horizontal_sprite_s1_chipselect   : in    std_logic                     := 'X';             -- chipselect
			snake_body_horizontal_sprite_s1_write        : in    std_logic                     := 'X';             -- write
			snake_body_horizontal_sprite_s1_readdata     : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_body_horizontal_sprite_s1_writedata    : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_body_horizontal_sprite_s1_byteenable   : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_body_topleft_sprite_s1_address         : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_body_topleft_sprite_s1_debugaccess     : in    std_logic                     := 'X';             -- debugaccess
			snake_body_topleft_sprite_s1_clken           : in    std_logic                     := 'X';             -- clken
			snake_body_topleft_sprite_s1_chipselect      : in    std_logic                     := 'X';             -- chipselect
			snake_body_topleft_sprite_s1_write           : in    std_logic                     := 'X';             -- write
			snake_body_topleft_sprite_s1_readdata        : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_body_topleft_sprite_s1_writedata       : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_body_topleft_sprite_s1_byteenable      : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_body_topright_sprite_s1_address        : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_body_topright_sprite_s1_debugaccess    : in    std_logic                     := 'X';             -- debugaccess
			snake_body_topright_sprite_s1_clken          : in    std_logic                     := 'X';             -- clken
			snake_body_topright_sprite_s1_chipselect     : in    std_logic                     := 'X';             -- chipselect
			snake_body_topright_sprite_s1_write          : in    std_logic                     := 'X';             -- write
			snake_body_topright_sprite_s1_readdata       : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_body_topright_sprite_s1_writedata      : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_body_topright_sprite_s1_byteenable     : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_body_vertical_sprite_s1_address        : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_body_vertical_sprite_s1_debugaccess    : in    std_logic                     := 'X';             -- debugaccess
			snake_body_vertical_sprite_s1_clken          : in    std_logic                     := 'X';             -- clken
			snake_body_vertical_sprite_s1_chipselect     : in    std_logic                     := 'X';             -- chipselect
			snake_body_vertical_sprite_s1_write          : in    std_logic                     := 'X';             -- write
			snake_body_vertical_sprite_s1_readdata       : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_body_vertical_sprite_s1_writedata      : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_body_vertical_sprite_s1_byteenable     : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_head_down_sprite_s1_address            : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_head_down_sprite_s1_debugaccess        : in    std_logic                     := 'X';             -- debugaccess
			snake_head_down_sprite_s1_clken              : in    std_logic                     := 'X';             -- clken
			snake_head_down_sprite_s1_chipselect         : in    std_logic                     := 'X';             -- chipselect
			snake_head_down_sprite_s1_write              : in    std_logic                     := 'X';             -- write
			snake_head_down_sprite_s1_readdata           : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_head_down_sprite_s1_writedata          : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_head_down_sprite_s1_byteenable         : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_head_left_sprite_s1_address            : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_head_left_sprite_s1_debugaccess        : in    std_logic                     := 'X';             -- debugaccess
			snake_head_left_sprite_s1_clken              : in    std_logic                     := 'X';             -- clken
			snake_head_left_sprite_s1_chipselect         : in    std_logic                     := 'X';             -- chipselect
			snake_head_left_sprite_s1_write              : in    std_logic                     := 'X';             -- write
			snake_head_left_sprite_s1_readdata           : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_head_left_sprite_s1_writedata          : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_head_left_sprite_s1_byteenable         : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_head_right_sprite_s1_address           : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_head_right_sprite_s1_debugaccess       : in    std_logic                     := 'X';             -- debugaccess
			snake_head_right_sprite_s1_clken             : in    std_logic                     := 'X';             -- clken
			snake_head_right_sprite_s1_chipselect        : in    std_logic                     := 'X';             -- chipselect
			snake_head_right_sprite_s1_write             : in    std_logic                     := 'X';             -- write
			snake_head_right_sprite_s1_readdata          : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_head_right_sprite_s1_writedata         : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_head_right_sprite_s1_byteenable        : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_head_up_sprite_s1_address              : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_head_up_sprite_s1_debugaccess          : in    std_logic                     := 'X';             -- debugaccess
			snake_head_up_sprite_s1_clken                : in    std_logic                     := 'X';             -- clken
			snake_head_up_sprite_s1_chipselect           : in    std_logic                     := 'X';             -- chipselect
			snake_head_up_sprite_s1_write                : in    std_logic                     := 'X';             -- write
			snake_head_up_sprite_s1_readdata             : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_head_up_sprite_s1_writedata            : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_head_up_sprite_s1_byteenable           : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_tail_down_sprite_s1_address            : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_tail_down_sprite_s1_debugaccess        : in    std_logic                     := 'X';             -- debugaccess
			snake_tail_down_sprite_s1_clken              : in    std_logic                     := 'X';             -- clken
			snake_tail_down_sprite_s1_chipselect         : in    std_logic                     := 'X';             -- chipselect
			snake_tail_down_sprite_s1_write              : in    std_logic                     := 'X';             -- write
			snake_tail_down_sprite_s1_readdata           : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_tail_down_sprite_s1_writedata          : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_tail_down_sprite_s1_byteenable         : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_tail_left_sprite_s1_address            : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_tail_left_sprite_s1_debugaccess        : in    std_logic                     := 'X';             -- debugaccess
			snake_tail_left_sprite_s1_clken              : in    std_logic                     := 'X';             -- clken
			snake_tail_left_sprite_s1_chipselect         : in    std_logic                     := 'X';             -- chipselect
			snake_tail_left_sprite_s1_write              : in    std_logic                     := 'X';             -- write
			snake_tail_left_sprite_s1_readdata           : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_tail_left_sprite_s1_writedata          : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_tail_left_sprite_s1_byteenable         : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			snake_tail_right_sprite_s1_address           : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- address
			snake_tail_right_sprite_s1_debugaccess       : in    std_logic                     := 'X';             -- debugaccess
			snake_tail_right_sprite_s1_clken             : in    std_logic                     := 'X';             -- clken
			snake_tail_right_sprite_s1_chipselect        : in    std_logic                     := 'X';             -- chipselect
			snake_tail_right_sprite_s1_write             : in    std_logic                     := 'X';             -- write
			snake_tail_right_sprite_s1_readdata          : out   std_logic_vector(15 downto 0);                    -- readdata
			snake_tail_right_sprite_s1_writedata         : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			snake_tail_right_sprite_s1_byteenable        : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- byteenable
			vga_b                                        : out   std_logic_vector(7 downto 0);                     -- b
			vga_blank_n                                  : out   std_logic;                                        -- blank_n
			vga_clk                                      : out   std_logic;                                        -- clk
			vga_g                                        : out   std_logic_vector(7 downto 0);                     -- g
			vga_hs                                       : out   std_logic;                                        -- hs
			vga_r                                        : out   std_logic_vector(7 downto 0);                     -- r
			vga_sync_n                                   : out   std_logic;                                        -- sync_n
			vga_vs                                       : out   std_logic;                                        -- vs
			wall_sprite_s1_address                       : in    std_logic_vector(9 downto 0)  := (others => 'X'); -- address
			wall_sprite_s1_debugaccess                   : in    std_logic                     := 'X';             -- debugaccess
			wall_sprite_s1_clken                         : in    std_logic                     := 'X';             -- clken
			wall_sprite_s1_chipselect                    : in    std_logic                     := 'X';             -- chipselect
			wall_sprite_s1_write                         : in    std_logic                     := 'X';             -- write
			wall_sprite_s1_readdata                      : out   std_logic_vector(15 downto 0);                    -- readdata
			wall_sprite_s1_writedata                     : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			wall_sprite_s1_byteenable                    : in    std_logic_vector(1 downto 0)  := (others => 'X')  -- byteenable
		);
	end component soc_system;

